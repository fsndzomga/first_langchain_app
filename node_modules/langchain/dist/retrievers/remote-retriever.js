import { Document } from "../document.js";
import { BaseRetriever } from "../schema/index.js";
import { AsyncCaller } from "../util/async_caller.js";
export class RemoteLangChainRetriever extends BaseRetriever {
    constructor({ url, auth = undefined, inputKey = "message", responseKey = "response", pageContentKey = "page_content", metadataKey = "metadata", ...rest }) {
        super();
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "auth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "responseKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "asyncCaller", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "pageContentKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "metadataKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = url;
        this.auth = auth;
        this.inputKey = inputKey;
        this.responseKey = responseKey;
        this.pageContentKey = pageContentKey;
        this.metadataKey = metadataKey;
        this.asyncCaller = new AsyncCaller(rest);
    }
    async getRelevantDocuments(query) {
        const res = await this.asyncCaller.call(fetch, this.url, {
            method: "POST",
            body: JSON.stringify({
                [this.inputKey]: query,
            }),
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                ...(this.auth ? this.auth : {}),
            },
        });
        if (!res.ok) {
            throw new Error(`Error calling RemoteLangChainRetriever: ${res.status}: ${res.statusText}`);
        }
        const body = await res.json();
        return body[this.responseKey].map(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (r) => new Document({
            pageContent: r[this.pageContentKey],
            metadata: r[this.metadataKey],
        }));
    }
}
//# sourceMappingURL=remote-retriever.js.map